{"ast":null,"code":"function calculateHandler(userInput) {\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n\n  const yearlyData = []; // per-year results\n\n  let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  const expectedReturn = +userInput['expected-return'] / 100;\n  const duration = +userInput['duration'];\n\n  // The below code calculates yearly results (total savings, interest etc)\n  for (let i = 0; i < duration; i++) {\n    const yearlyInterest = currentSavings * expectedReturn;\n    currentSavings += yearlyInterest + yearlyContribution;\n    yearlyData.push({\n      // feel free to change the shape of the data pushed to the array!\n      year: i + 1,\n      yearlyInterest: yearlyInterest,\n      savingsEndOfYear: currentSavings,\n      yearlyContribution: yearlyContribution\n    });\n  }\n\n  // do something with yearlyData ...\n}\n;\nexport default calculateHandler;","map":{"version":3,"names":["calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear"],"sources":["C:/Users/yskor/reactcourse5/src/components/calculateHandler.js"],"sourcesContent":["\r\nfunction calculateHandler(userInput) {\r\n    // Should be triggered when form is submitted\r\n    // You might not directly want to bind it to the submit event on the form though...\r\n\r\n    const yearlyData = []; // per-year results\r\n\r\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\r\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\r\n    const expectedReturn = +userInput['expected-return'] / 100;\r\n    const duration = +userInput['duration'];\r\n\r\n    // The below code calculates yearly results (total savings, interest etc)\r\n    for (let i = 0; i < duration; i++) {\r\n        const yearlyInterest = currentSavings * expectedReturn;\r\n        currentSavings += yearlyInterest + yearlyContribution;\r\n        yearlyData.push({\r\n            // feel free to change the shape of the data pushed to the array!\r\n            year: i + 1,\r\n            yearlyInterest: yearlyInterest,\r\n            savingsEndOfYear: currentSavings,\r\n            yearlyContribution: yearlyContribution,\r\n        });\r\n    }\r\n\r\n    // do something with yearlyData ...\r\n};\r\n\r\nexport default calculateHandler\r\n"],"mappings":"AACA,SAASA,gBAAgBA,CAACC,SAAS,EAAE;EACjC;EACA;;EAEA,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;EAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;EACpD,MAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;EAC9D,MAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;EAC1D,MAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;EAEvC;EACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;IAC/B,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;IACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;IACrDF,UAAU,CAACO,IAAI,CAAC;MACZ;MACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;MACXC,cAAc,EAAEA,cAAc;MAC9BG,gBAAgB,EAAER,cAAc;MAChCC,kBAAkB,EAAEA;IACxB,CAAC,CAAC;EACN;;EAEA;AACJ;AAAC;AAED,eAAeJ,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}